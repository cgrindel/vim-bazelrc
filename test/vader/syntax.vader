Execute (Test file type detection):
  edit test/fixtures/sample.bazelrc
  AssertEqual 'bazelrc', &filetype

Execute (Test comment highlighting):
  edit test/fixtures/sample.bazelrc
  normal! gg
  AssertEqual 'bazelrcComment', synIDattr(synID(1, 1, 1), 'name')

Execute (Test TODO in comment):
  edit test/fixtures/sample.bazelrc
  normal! 2G
  let col = col('TODO') - 1
  if col > 0
    AssertEqual 'bazelrcTodo', synIDattr(synIDtrans(synID(2, col, 1)), 'name')
  endif

Execute (Test FIXME in comment):
  edit test/fixtures/sample.bazelrc
  normal! 3G
  let col = col('FIXME') - 1
  if col > 0
    AssertEqual 'bazelrcTodo', synIDattr(synIDtrans(synID(3, col, 1)), 'name')
  endif

Execute (Test import keyword):
  edit test/fixtures/sample.bazelrc
  normal! 6G
  AssertEqual 'bazelrcKeywords', synIDattr(synID(6, 1, 1), 'name')

Execute (Test try-import keyword):
  edit test/fixtures/sample.bazelrc
  normal! 7G
  AssertEqual 'bazelrcKeywords', synIDattr(synID(7, 1, 1), 'name')

Execute (Test common scope):
  edit test/fixtures/sample.bazelrc
  normal! 10G
  AssertEqual 'bazelrcScope', synIDattr(synID(10, 1, 1), 'name')

Execute (Test build scope):
  edit test/fixtures/sample.bazelrc
  normal! 14G  
  AssertEqual 'bazelrcScope', synIDattr(synID(14, 1, 1), 'name')

Execute (Test long option --compilation_mode):
  edit test/fixtures/sample.bazelrc
  normal! 14G
  let col = col('--compilation_mode') - 1
  if col > 0
    AssertEqual 'bazelrcLongOption', synIDattr(synID(14, col, 1), 'name')
  endif

Execute (Test long option --copt):
  edit test/fixtures/sample.bazelrc
  normal! 15G
  let col = col('--copt') - 1
  if col > 0
    AssertEqual 'bazelrcLongOption', synIDattr(synID(15, col, 1), 'name')
  endif

Execute (Test short option -c):
  edit test/fixtures/sample.bazelrc
  normal! 17G
  let col = col('-c') - 1
  if col > 0
    AssertEqual 'bazelrcShortOption', synIDattr(synID(17, col, 1), 'name')
  endif

Execute (Test config group in scope):
  edit test/fixtures/sample.bazelrc
  normal! /build:debug
  let line = line('.')
  let col = col('debug') - 1
  if col > 0
    AssertEqual 'bazelrcConfigGroup', synIDattr(synID(line, col, 1), 'name')
  endif

Execute (Test test scope with config):
  edit test/fixtures/sample.bazelrc
  normal! /test:integration
  let line = line('.')
  AssertEqual 'bazelrcScope', synIDattr(synID(line, 1, 1), 'name')

Execute (Test run scope):
  edit test/fixtures/sample.bazelrc
  normal! /^run --run_under
  let line = line('.')
  AssertEqual 'bazelrcScope', synIDattr(synID(line, 1, 1), 'name')

Execute (Test query scope):
  edit test/fixtures/sample.bazelrc
  normal! /^query --output
  let line = line('.')
  AssertEqual 'bazelrcScope', synIDattr(synID(line, 1, 1), 'name')

Execute (Test startup scope):
  edit test/fixtures/sample.bazelrc
  normal! /^startup --host_jvm_args
  let line = line('.')
  AssertEqual 'bazelrcScope', synIDattr(synID(line, 1, 1), 'name')

Execute (Test complex config name with underscores and numbers):
  edit test/fixtures/sample.bazelrc
  normal! /build:config_v2
  let line = line('.')
  let col = col('config_v2') - 1
  if col > 0
    AssertEqual 'bazelrcConfigGroup', synIDattr(synID(line, col, 1), 'name')
  endif